package main

import (
	"fmt"
)

type node struct {
	value int
	next  *node
}

func printCurTillEnd(n *node) {
	for n != nil {
		fmt.Print(n.value, "->")
		n = n.next
	}
	fmt.Println("nil")
}

func addNodeNext(n *node, to_add *node) {
	if n.next == nil {
		n.next = to_add
	} else {

		var second_chain = n.next
		n.next = to_add
		to_add.next = second_chain
	}
}

func findNodeByValue(n *node, value int) *node {
	for n != nil {
		if n.value == value {
			return n
		} else {
			n = n.next
		}
	}
	return nil
}

func removeNode(n *node, value int) {

	if n.next == nil {
		panic("")
	}
	var faster_n *node = n.next
	for faster_n != nil {
		if faster_n.value == value {
			// We find n need to remove
		}
		// keep finding
	}

}

func main() {

	var firstNode = node{value: 1}
	var secondNode = node{value: 2}
	var thirdNode = node{value: 3}
	firstNode.next = &secondNode
	secondNode.next = &thirdNode
	var cur *node = &firstNode

	addNodeNext(&firstNode, &node{value: 23})
	addNodeNext(&thirdNode, &node{value: 1000})
	n := findNodeByValue(cur, 2)
	if n != nil {
		fmt.Println("Node finded ", &n, n.value)
	} else {
		fmt.Println("Node not finded")
	}

	printCurTillEnd(cur)

}
